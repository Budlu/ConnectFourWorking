[{"C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\index.js":"1","C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\game.js":"2","C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\analysis.js":"3","C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\menu.js":"4","C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\evalbar.js":"5"},{"size":16600,"mtime":1627225735215,"results":"6","hashOfConfig":"7"},{"size":3573,"mtime":1627065185007,"results":"8","hashOfConfig":"7"},{"size":1167,"mtime":1611415693486,"results":"9","hashOfConfig":"7"},{"size":5136,"mtime":1627058143391,"results":"10","hashOfConfig":"7"},{"size":838,"mtime":1611420376421,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"139d7k1",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\index.js",["25"],"import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { Game } from \"./game.js\";\r\nimport { Menu } from \"./menu.js\";\r\nimport { Analysis } from \"./analysis.js\";\r\nimport { EvalBar } from \"./evalbar.js\";\r\n\r\nconst POST_IP = \"percent\";\r\nconst ANALYSIS_COLUMNS = 3;\r\nconst DROP_TIME = 125;\r\n\r\nclass Main extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.pvpMode = this.pvpMode.bind(this);\r\n        this.playerFirst = this.playerFirst.bind(this);\r\n        this.redFirst = this.redFirst.bind(this);\r\n\r\n        this.startGame = this.startGame.bind(this);\r\n        this.handleData = this.handleData.bind(this);\r\n        this.moveFromColumn = this.moveFromColumn.bind(this);\r\n        this.computerMove = this.computerMove.bind(this);\r\n        this.updateBoard = this.updateBoard.bind(this);\r\n        this.updateHistory = this.updateHistory.bind(this);\r\n        this.updateGame = this.updateGame.bind(this);\r\n        this.restartGame = this.restartGame.bind(this);\r\n        this.randomMove = this.randomMove.bind(this);\r\n        this.jump = this.jump.bind(this);\r\n        this.startAnalysis = this.startAnalysis.bind(this)\r\n        this.keyDown = this.keyDown.bind(this);\r\n        this.toggleDarkMode = this.toggleDarkMode.bind(this);\r\n\r\n        document.onkeydown = this.keyDown;\r\n\r\n        let darkMode = getCookie(\"darkMode\");\r\n        let sheet = \"\";\r\n        if (darkMode === \"true\")\r\n        {\r\n            darkMode = true;\r\n            sheet = \"/dark.css\";\r\n        }\r\n        else\r\n        {\r\n            darkMode = false;\r\n            sheet = \"/style.css\";\r\n        }\r\n\r\n        this.state = {\r\n            rows: 6,\r\n            columns: 7,\r\n            gameActive: false,\r\n            board: generateBoard(6,7),\r\n            highlighted: generateBoard(7, 6),\r\n            emptyHighlight: generateBoard(7, 6),\r\n            highlightCopy: generateBoard(7, 6),\r\n            maximizingPlayer: true,\r\n            pvp: true,\r\n            playerFirst: true,\r\n            redFirst: true,\r\n            gameOver: false,\r\n            playerCanMove: true,\r\n            status: \"Pick your settings\",\r\n            history: [{\"board\": generateBoard(6, 7)}],\r\n            analysis: false,\r\n            index: 0,\r\n            lastMove: false,\r\n            connected: false,\r\n            stylePath: sheet,\r\n            darkMode: darkMode\r\n        }\r\n    }\r\n\r\n    pvpMode(mode)\r\n    {\r\n        this.setState({pvp: mode})\r\n    }\r\n\r\n    playerFirst(mode)\r\n    {\r\n        this.setState({playerFirst: mode});\r\n    }\r\n\r\n    redFirst(mode)\r\n    {\r\n        this.setState({redFirst: mode});\r\n    }\r\n\r\n    startGame()\r\n    {\r\n        this.setState({gameActive: true, playerCanMove: this.state.playerFirst}, this.updateGame);\r\n    }\r\n\r\n    updateBoard(i, k)\r\n    {\r\n        let chip = 0;\r\n        if (this.state.maximizingPlayer)\r\n            chip = 1;\r\n        else\r\n            chip = -1;\r\n\r\n        let newBoard = JSON.parse(JSON.stringify(this.state.board));\r\n        newBoard[i][k] = chip;\r\n\r\n        let newHistory = this.state.history;\r\n        newHistory.push({\"board\": newBoard});\r\n        this.setState({history: newHistory, index: this.state.index + 1});\r\n\r\n        let gameState = checkGameOver(newBoard, i, k);\r\n\r\n        if (gameState === 2)\r\n        {\r\n            this.setState({board: newBoard, maximizingPlayer: !this.state.maximizingPlayer, gameActive: false, gameOver: true, status: \"It's a draw\"});\r\n            playDrop();\r\n\r\n            return;\r\n        }\r\n        else if (gameState !== 0)\r\n        {\r\n            let new_highlighted = generateBoard(this.state.columns, this.state.rows);\r\n\r\n            for (let highlight of gameState)\r\n            {\r\n                new_highlighted[highlight[1]][highlight[0]] = 1;\r\n            }\r\n\r\n            let winner = \"\";\r\n            let color = \"\";\r\n            if (redMove(this.state.maximizingPlayer, this.state.redFirst))\r\n            {\r\n                winner = \"Red\";\r\n                color = \"red\";\r\n            }\r\n            else\r\n            {\r\n                winner = \"Yellow\";\r\n                color = \"yellow\";\r\n            }\r\n\r\n            let highlightCopy = JSON.parse(JSON.stringify(new_highlighted));\r\n            this.setState({board: newBoard, maximizingPlayer: !this.state.maximizingPlayer, gameActive: false, gameOver: true, highlighted: new_highlighted, highlightCopy: highlightCopy, status: <span style={{color: color}}>{winner} wins!</span>});\r\n            playDrop();\r\n\r\n            return;\r\n        }\r\n\r\n        if (!this.state.pvp)\r\n            this.setState({board: newBoard, maximizingPlayer: !this.state.maximizingPlayer, playerCanMove: !this.state.playerCanMove}, this.updateGame);\r\n        else\r\n            this.setState({board: newBoard, maximizingPlayer: !this.state.maximizingPlayer}, this.updateGame);\r\n\r\n        playDrop();\r\n    }\r\n\r\n    updateGame()\r\n    {\r\n        let redMessage = <span style={{color: \"red\"}}>Red's move</span>;\r\n        let yellowMessage = <span style={{color: \"yellow\"}}>Yellow's move</span>;\r\n\r\n        if (redMove(this.state.maximizingPlayer, this.state.redFirst))\r\n        {\r\n            this.setState({status: redMessage});\r\n        }\r\n        else\r\n        {\r\n            this.setState({status: yellowMessage});\r\n        }\r\n\r\n        if (!this.state.pvp && !this.state.playerCanMove)\r\n        {\r\n            this.computerMove();\r\n        }\r\n    }\r\n\r\n    restartGame()\r\n    {\r\n        this.setState({gameActive: false, board: generateBoard(6,7), highlighted: generateBoard(7,6), highlightCopy: generateBoard(7, 6), maximizingPlayer: true, gameOver: false, playerCanMove: true, playerFirst: true, status: \"Pick your settings\", history: [{\"board\": generateBoard(6, 7)}], analysis: false, index: 0, lastMove: false});\r\n    }\r\n\r\n    computerMove()\r\n    {\r\n        let options = {method: 'POST', mode: 'cors', headers: {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'}, body: JSON.stringify(this.state.board)};\r\n\t\r\n        fetch(POST_IP, options)\r\n        .then(response => response.json())\r\n        .then(data => { this.handleData(data) } )\r\n        .catch(error => { this.randomMove(); } );\r\n    }\r\n\r\n    handleData(data)\r\n    {\r\n        if (!this.state.gameActive)\r\n            return;\r\n\r\n        let updatedHistory = this.state.history;\r\n        updatedHistory[updatedHistory.length - 1][\"best\"] = data.best;\r\n        updatedHistory[updatedHistory.length - 1][\"percent\"] = data.percent;\r\n\r\n        this.moveFromColumn(data.best);\r\n        this.setState({history: updatedHistory})\r\n    }\r\n\r\n    randomMove()\r\n    {\r\n        if (!this.state.gameActive)\r\n            return;\r\n\r\n        let validMoves = [];\r\n\r\n        for (let k = 0; k < this.state.board[0].length; k++)\r\n        {\r\n            if (this.state.board[0][k] === 0)\r\n                validMoves.push(k);\r\n        }\r\n\r\n        let index = Math.floor(Math.random() * validMoves.length);\r\n\r\n        this.moveFromColumn(index);\r\n    }\r\n\r\n    moveFromColumn(k)\r\n    {\r\n        let i = this.state.board.length - 1;\r\n\r\n        while (i >= 0)\r\n        {\r\n            if (!this.state.board[i][k])\r\n            {\r\n                this.updateBoard(i, k);\r\n                return;\r\n            }\r\n\r\n            i -= 1;\r\n        }\r\n\r\n        this.updateBoard(i, k);\r\n    }\r\n\r\n    jump(i)\r\n    {\r\n        if (i > this.state.index)\r\n            playDrop();\r\n\r\n        if (i === this.state.history.length - 1)\r\n        {\r\n            this.setState({board: this.state.history[i][\"board\"], highlighted: this.state.highlightCopy, index: i, lastMove: true})\r\n        }\r\n        else\r\n        {\r\n            this.setState({board: this.state.history[i][\"board\"], highlighted: this.state.emptyHighlight, index: i, lastMove: false});\r\n        }\r\n    }\r\n\r\n    updateHistory(data, i)\r\n    {\r\n        if (!this.state.analysis)\r\n            return;\r\n\r\n        let newHistory = this.state.history;\r\n        newHistory[i][\"percent\"] = data[\"percent\"];\r\n        newHistory[i][\"best\"] = data[\"best\"];\r\n\r\n        this.setState({history: newHistory, connected: true});\r\n    }\r\n\r\n    startAnalysis()\r\n    {\r\n        this.setState({analysis: true});\r\n\r\n        for (let i = 0; i < this.state.history.length; i++)\r\n        {\r\n            if (this.state.history[i][\"percent\"] === undefined)\r\n            {\r\n                let options = {method: 'POST', mode: 'cors', headers: {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'}, body: JSON.stringify(this.state.history[i][\"board\"])};\r\n\r\n                fetch(POST_IP, options)\r\n                .then(response => response.json())\r\n                .then(data => { this.updateHistory(data, i); } )\r\n                .catch(error => { this.setState({connected: false}); } );\r\n            }\r\n        }\r\n\r\n        this.jump(0);\r\n    }\r\n\r\n    keyDown(e)\r\n    {\r\n        let event = window.event ? window.event : e;\r\n\r\n        if (event.key === \"ArrowDown\" || event.key === \"ArrowRight\" || event.key === \"s\" || event.key === \"d\")\r\n        {\r\n            if (this.state.analysis && this.state.index < (this.state.history.length - 1))\r\n                this.jump(this.state.index + 1);\r\n\r\n            event.preventDefault();\r\n        }\r\n        else if (event.key === \"ArrowUp\" || event.key === \"ArrowLeft\" || event.key === \"w\" || event.key === \"a\")\r\n        {\r\n            if (this.state.analysis && this.state.index > 0)\r\n                this.jump(this.state.index - 1);\r\n\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    toggleDarkMode()\r\n    {\r\n        let mode = !this.state.darkMode;\r\n\r\n        if (mode)\r\n            this.setState({darkMode: mode, stylePath: \"/dark.css\"});\r\n        else\r\n            this.setState({darkMode: mode, stylePath: \"/style.css\"});\r\n\r\n        setCookie(\"darkMode\", mode, 365 * 10);\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"container\">\r\n                <link rel=\"stylesheet\" type=\"text/css\" href={ process.env.PUBLIC_URL + this.state.stylePath } />\r\n                <div className=\"header\">\r\n                    <h1>Connect Four</h1>\r\n                    <div className=\"credits\">\r\n                        Matthew Rubino - <a href=\"https://github.com/Budlu/ConnectFour\" target=\"_blank\" rel=\"noreferrer\">https://github.com/Budlu/ConnectFour</a>\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\" >\r\n                    <div className=\"column-1\">\r\n                        <Menu pvpMode={this.pvpMode} playerFirst={this.playerFirst} redFirst={this.redFirst} startGame={this.startGame} restartGame={this.restartGame} visible={this.state.gameOver} started={this.state.analysis} startAnalysis={this.startAnalysis} />\r\n                        <Analysis visible={this.state.analysis} history={this.state.history} jump={this.jump} index={this.state.index} />\r\n                    </div>\r\n                    <div className=\"column-2\">\r\n                        <h2>{this.state.status}</h2>\r\n                        <div className=\"game-link\">\r\n                            <EvalBar redFirst={this.state.redFirst} p1Height={this.state.history[this.state.index][\"percent\"]} analysis={this.state.analysis} connected={this.state.connected} />\r\n                            <Game rows={6} columns={7} board={this.state.board} highlighted={this.state.highlighted} updateBoard={this.updateBoard} active={this.state.gameActive} redFirst={this.state.redFirst} playerMove={this.state.playerCanMove} analysis={this.state.analysis} best={this.state.history[this.state.index][\"best\"]} lastMove={this.state.lastMove} connected={this.state.connected} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button className=\"dark-mode\" onClick={() => {this.toggleDarkMode(); playClick();} }>O</button>\r\n                <audio src={process.env.PUBLIC_URL + \"/click.mp3\"} preload=\"auto\" controls=\"none\" id=\"sound\" style={{display: \"none\"}} className=\"click-source\" />\r\n                <audio src={process.env.PUBLIC_URL + \"/drop.mp3\"} preload=\"auto\" controls=\"none\" id=\"sound\" style={{display: \"none\"}} className=\"drop-source\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction generateBoard(rows, columns)\r\n{\r\n    let board = [];\r\n\r\n    for (let i = 0; i < rows; i++)\r\n    {\r\n        let row = [];\r\n        for (let k = 0; k < columns; k++)\r\n        {\r\n            row.push(0);\r\n        }\r\n        board.push(row);\r\n    }\r\n\r\n    return board;\r\n}\r\n\r\nfunction checkGameOver(board, i, k)\r\n{\r\n    let height = board.length;\r\n    let width = board[0].length;\r\n\r\n    // Horizontal Win Check\r\n    let start = clamp(k-3, 0, width - 4);\r\n    let end = clamp(k, 0, width - 4);\r\n\r\n    while (start <= end)\r\n    {\r\n        let tiles = [board[i][start], board[i][start + 1], board[i][start + 2], board[i][start + 3]];\r\n        if (tiles.every((value, i, arr) => value === arr[0]))\r\n            return [[i, start], [i, start + 1], [i, start + 2], [i, start + 3]];\r\n        \r\n        start += 1;\r\n    }\r\n\r\n    // Vertical Win Check\r\n    if (i <= height - 4)\r\n    {\r\n        let tiles = [board[i][k], board[i + 1][k], board[i + 2][k], board[i + 3][k]];\r\n        if (tiles.every((value, i, arr) => value === arr[0]))\r\n            return [[i, k], [i + 1, k], [i + 2, k], [i + 3, k]];\r\n    }\r\n\r\n    // Diagonal Win Check (TL to BR)\r\n    let minLeftDiff = min(i, k);\r\n    start = clamp(minLeftDiff, 0, 3);\r\n\r\n    let minRightDiff = min(height - i - 1, width - k - 1);\r\n    end = clamp(3 - minRightDiff, 0, 3)\r\n\r\n    while (start >= end)\r\n    {\r\n        let tiles = [board[i - start][k - start], board[i - start + 1][k - start + 1], board[i - start + 2][k - start + 2], board[i - start + 3][k - start + 3]];\r\n        if (tiles.every((value, i, arr) => value === arr[0]))\r\n            return [[i - start, k - start], [i - start + 1, k - start + 1], [i - start + 2, k - start + 2], [i - start + 3, k - start + 3]];\r\n\r\n        start -= 1;\r\n    }\r\n\r\n    // Diagonal Win Check (TR to BL)\r\n    minLeftDiff = min(height - i - 1, k)\r\n    minRightDiff = min(i, width - k - 1)\r\n\r\n    start = clamp(minRightDiff, 0, 3)\r\n    end = clamp(3 - minLeftDiff, 0, 3)\r\n\r\n    while (start >= end)\r\n    {\r\n        let tiles = [board[i - start][k + start], board[i - start + 1][k + start - 1], board[i - start + 2][k + start - 2], board[i - start + 3][k + start - 3]];\r\n        if (tiles.every((value, i, arr) => value === arr[0]))\r\n            return [[i - start, k + start], [i - start + 1, k + start - 1], [i - start + 2, k + start - 2], [i - start + 3, k + start - 3]];\r\n\r\n        start -= 1;\r\n    }\r\n\r\n    for (let n = 0; n < width; n++)\r\n    {\r\n        if (!board[0][n])\r\n            return 0;\r\n    }\r\n\r\n    return 2;\r\n}\r\n\r\nfunction clamp(val, min, max)\r\n{\r\n    if (val >= max)\r\n        return max;\r\n    else if (val <= min)\r\n        return min;\r\n    else\r\n        return val;\r\n}\r\n\r\nfunction min(x1, x2)\r\n{\r\n    if (x1 < x2)\r\n        return x1;\r\n    else\r\n        return x2;\r\n}\r\n\r\nfunction redMove(maximizingPlayer, redFirst)\r\n{\r\n    if (redFirst)\r\n    {\r\n        if (maximizingPlayer)\r\n            return true;\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        if (maximizingPlayer)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction playDrop()\r\n{\r\n    let drop = document.getElementsByClassName(\"drop-source\")[0];\r\n    setTimeout(function() {\r\n        drop.load();\r\n        drop.play()\r\n        .catch(error => {console.warn(error)});\r\n    }, DROP_TIME);\r\n}\r\n\r\nfunction playClick()\r\n{\r\n    let click = document.getElementsByClassName(\"click-source\")[0];\r\n    click.load();\r\n    click.play()\r\n    .catch(error => {console.warn(error)});\r\n}\r\n\r\nfunction setCookie(cname, cvalue, exdays)\r\n{\r\n    var d = new Date();\r\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\r\n    var expires = \"expires=\"+d.toUTCString();\r\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n  }\r\n\r\nfunction getCookie(cname)\r\n{\r\n    var name = cname + \"=\";\r\n    var decodedCookie = decodeURIComponent(document.cookie);\r\n    var ca = decodedCookie.split(';');\r\n    for(var i = 0; i <ca.length; i++) {\r\n      var c = ca[i];\r\n      while (c.charAt(0) === ' ') {\r\n        c = c.substring(1);\r\n      }\r\n      if (c.indexOf(name) === 0) {\r\n        return c.substring(name.length, c.length);\r\n      }\r\n    }\r\n    return \"\";\r\n}\r\n\r\nlet tiles = document.getElementsByClassName(\"tile\");\r\nfor (let tile of tiles)\r\n{\r\n    tile.addEventListener(\"animationend\", dropAnimationEnd());\r\n}\r\n\r\nfunction dropAnimationEnd()\r\n{\r\n    playDrop();\r\n}\r\n\r\nReactDom.render(<Main />, document.getElementById(\"root\"));",["26","27"],"C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\game.js",[],"C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\analysis.js",[],"C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\menu.js",[],"C:\\Users\\budlu\\source\\repos\\Python\\ConnectFourWorking\\conn-four-app\\src\\evalbar.js",[],["28","29"],{"ruleId":"30","severity":1,"message":"31","line":9,"column":7,"nodeType":"32","messageId":"33","endLine":9,"endColumn":23},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"38"},{"ruleId":"36","replacedBy":"39"},"no-unused-vars","'ANALYSIS_COLUMNS' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["40"],"no-negated-in-lhs",["41"],["40"],["41"],"no-global-assign","no-unsafe-negation"]